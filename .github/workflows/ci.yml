name: CI - E-Market MERN API

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Overall job timeout

    services:
      mongodb:
        image: prismagraphql/mongo-single-replica:4.4.3-bionic
        ports:
          - 27017:27017
        env:
          INIT_WAIT_SEC: 3

    env:
      NODE_ENV: test
      DB_URI: mongodb://localhost:27017/E_Market_API_Test?replicaSet=rs0
      JWT_SECRET: your-test-jwt-secret-change-in-production
      JWT_EXPIRE: 30m
      PORT: 3000

    steps:
      # checkout repo
      - name: checkout code
        uses: actions/checkout@v4

      # install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # install dependencies form package.json cleanly
      - name: Install dependencies
        run: npm ci
      
      # Wait for MongoDB replica set to be ready
      - name: Wait for MongoDB Replica Set
        run: |
          # Install mongosh
          curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          
          # Wait for replica set to be ready
          echo "Waiting for MongoDB replica set..."
          until mongosh "mongodb://localhost:27017/admin?replicaSet=rs0" --eval "rs.status().ok" --quiet; do
            echo "Replica set not ready yet..."
            sleep 2
          done
          echo "MongoDB replica set is ready!"
      
      # Debug step - verify database connection
      - name: Verify Database Connection
        run: |
          node -e "
          const mongoose = require('mongoose');
          console.log('Connecting to:', process.env.DB_URI);
          mongoose.connect(process.env.DB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 30000,
            socketTimeoutMS: 45000,
          })
            .then(() => {
              console.log('✅ Database connected successfully');
              return mongoose.connection.db.admin().command({ ping: 1 });
            })
            .then(() => {
              console.log('✅ Database ping successful');
              process.exit(0);
            })
            .catch(err => {
              console.error('❌ Database connection failed:', err);
              process.exit(1);
            });
          "
      
      # Create test environment file
      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DB_URI=$DB_URI
          JWT_SECRET=$JWT_SECRET
          JWT_EXPIRE=$JWT_EXPIRE
          PORT=$PORT
          EOF
      
      # run all tests with longer timeout
      - name: Run tests
        run: npm run test

      # run coverage test with longer timeout
      - name: Run coverage test
        run: npm run coverage
      
      # Verify the Dockerfile builds successfully
      - name: Build Docker image
        run: docker build -t mern-api-image .