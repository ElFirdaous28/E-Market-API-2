// jobs/lowStockNotifier.js
import cron from "node-cron";
import Cart from "../models/Cart.js";
import Notification from "../models/Notification.js"; // üî• N'oublie pas d'importer
import Product from "../models/Product.js";

// Cron job: v√©rifie chaque minute les produits en panier avec stock ‚â§ 5
cron.schedule("* * * * *", async () => {
  try {
    console.log("Job lowStockNotification d√©marr√©...");

    // R√©cup√©rer tous les paniers avec uniquement les champs n√©cessaires
    const carts = await Cart.find({}, "items userId").populate("items.productId", "title stock");

    for (const cart of carts) {
      const notificationPromises = cart.items.map(async (item) => {
        const product = item.productId;
        if (!product) return;

        // Si stock critique et pas encore notifi√©
        if (product.stock <= 5 && !item.lowStockNotified) {
          const message = `Attention ! Le produit "${product.title}" dans votre panier est presque √©puis√©. Stock restant : ${product.stock}`;
          await Notification.create({ userId: cart.userId, message });
          item.lowStockNotified = true;
        }

        // Si stock remonte >5, r√©initialiser la notification
        if (product.stock > 5 && item.lowStockNotified) {
          item.lowStockNotified = false;
        }
      });

      // Ex√©cuter toutes les notifications en parall√®le pour ce panier
      await Promise.all(notificationPromises);

      // Sauvegarder le panier
      await cart.save();
    }

    console.log("Job lowStockNotification ex√©cut√© avec succ√®s !");
  } catch (err) {
    console.error("Erreur job lowStockNotification :", err);
  }
});
